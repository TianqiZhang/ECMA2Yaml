trigger:
- master
- develop

pr:
- develop
- master

name: $(Date:yyyyMMdd)-$(Rev:r)

pool:
  vmImage: 'windows-latest'

variables:
  solution: 'ECMA2Yaml/ECMA2Yaml.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  displayName: Nuget Restore
  inputs:
    restoreSolution: '$(solution)'

- task: VSBuild@1
  displayName: Build
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: VSTest@2
  displayName: Unit Tests
  inputs:
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: PowerShell@2
  displayName: Integration Tests
  inputs:
    filePath: 'CI/devopsIntTest.ps1'

# Security Tasks
- task: CredScan@2
  displayName: Security - CredScan
  inputs:
    toolMajorVersion: 'V2'
- task: PostAnalysis@1
  displayName: Security - PostAnalysis
  inputs:
    AllTools: false
    APIScan: false
    BinSkim: false
    CodesignValidation: false
    CredScan: true
    FortifySCA: false
    FxCop: false
    ModernCop: false
    PoliCheck: false
    RoslynAnalyzers: false
    SDLNativeRules: false
    Semmle: false
    TSLint: false
    ToolLogsNotFoundAction: 'Standard'

# Publish Artifacts for debug
- task: PublishPipelineArtifact@1
  displayName: 'Publish Pipeline Artifact'
  inputs:
    targetPath: 'test'
    artifact: test
  condition: succeededOrFailed()

- task: EsrpCodeSigning@1
  displayName: Sign exe, dll and powershell files
  inputs:
    ConnectedServiceName: 'CodeSigning-APEX'
    FolderPath: '$(System.DefaultWorkingDirectory)/ECMA2Yaml'
    Pattern: |
      ECMA2Yaml\bin\Release\**\*.dll
      ECMA2Yaml\bin\Release\**\*.exe
      IntellisenseFileGen\bin\Release\**\*.exe
      MSDNUrlPatch\bin\Release\**\*.exe
      ECMA2Yaml\Nuget\*.ps1
      ECMAHelper\bin\Release\**\*.dll
    UseMinimatch: true
    signConfigType: inlineSignParams
    inlineOperation: |
     [
        {
          "KeyCode": "CP-236167",
          "OperationSetCode": "SigntoolSign",
          "parameters": [
            {
              "parameterName": "OpusName",
              "parameterValue": "Microsoft"
            },
            {
              "parameterName": "OpusInfo",
              "parameterValue": "http://www.microsoft.com"
            },
            {
              "parameterName": "PageHash",
              "parameterValue": "/NPH"
            },
            {
              "parameterName": "TimeStamp",
              "parameterValue": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
            },
            {
              "parameterName": "FileDigest",
              "parameterValue": "/fd \"SHA256\""
            }
          ],
          "ToolName": "sign",
          "ToolVersion": "1.0"
        },
        {
          "KeyCode": "CP-236167",
          "OperationSetCode": "SigntoolVerify",
          "Parameters": [
            {
              "parameterName": "VerifyAll",
              "parameterValue": "/all"
            }
          ],
          "ToolName": "sign",
          "ToolVersion": "1.0"
        }
      ]
    SessionTimeout: '60'
    MaxConcurrency: '50'
    MaxRetryAttempts: '5'

# Pack ECMA2Yaml
- task: PowerShell@2
  displayName: Nuget Pack ECMA2Yaml
  inputs:
    filePath: 'CI/devopsPack.ps1'

# Pack ECMAHelper
- task: MSBuild@1
  displayName: Nuget Pack ECMAHelper
  inputs:
    solution: 'ECMA2Yaml\ECMAHelper\ECMAHelper.csproj'
    configuration: 'Release'
    msbuildArguments: '-t:pack -p:PackageOutputPath=$(Build.SourcesDirectory)\_nuget\ECMAHelper -p:PackageVersion=$(CurrentPackageVersion)'

# Publish Nuget Package
- task: DotNetCoreCLI@2
  displayName: Nuget Publish ECMA2Yaml
  condition: and(succeeded(), eq(variables['ECMA2YamlNugetPush'], 'Yes'))
  inputs:
    command: 'push'
    packagesToPush: '$(Build.SourcesDirectory)/_nuget/ECMA2Yaml/*.nupkg'
    feedPublish: 'OpenPublishingService'
- task: DotNetCoreCLI@2
  displayName: Nuget Publish ECMAHelper
  condition: and(succeeded(), eq(variables['ECMA2YamlNugetPush'], 'Yes'))
  inputs:
    command: 'push'
    packagesToPush: '$(Build.SourcesDirectory)/_nuget/ECMAHelper/*.nupkg'
    nuGetFeedType: 'external'
    publishFeedCredentials: 'docs-public-packages'
