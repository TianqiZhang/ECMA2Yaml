<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Runtime</name>
  </assembly>
  <members>
    <member name="T:System.Collections.DictionaryEntry">
      <summary>Defines a dictionary key/value pair that can be set or retrieved.</summary>
    </member>
    <member name="M:System.Collections.DictionaryEntry.#ctor(System.Object,System.Object)">
      <summary>Initializes an instance of the <see cref="T:System.Collections.DictionaryEntry" /> type with the specified key and value.</summary>
      <param name="key">The object defined in each key/value pair.</param>
      <param name="value">The definition associated with <paramref name="key" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" /> and the .NET Framework version is 1.0 or 1.1.</exception>
    </member>
    <member name="P:System.Collections.DictionaryEntry.Key">
      <summary>Gets or sets the key in the key/value pair.</summary>
      <returns>The key in the key/value pair.</returns>
    </member>
    <member name="P:System.Collections.DictionaryEntry.Value">
      <summary>Gets or sets the value in the key/value pair.</summary>
      <returns>The value in the key/value pair.</returns>
    </member>
    <member name="T:System.Collections.Generic.IAsyncEnumerable`1">
      <summary>Exposes an enumerator that provides asynchronous iteration over values of a specified type.</summary>
      <typeparam name="T">The type of the elements in the collection.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.IAsyncEnumerable`1.GetAsyncEnumerator(System.Threading.CancellationToken)">
      <summary>Returns an enumerator that iterates asynchronously through the collection.</summary>
      <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> that may be used to cancel the asynchronous iteration.</param>
      <returns>An enumerator that can be used to iterate asynchronously through the collection.</returns>
    </member>
    <member name="T:System.Collections.Generic.IAsyncEnumerator`1">
      <summary>Supports a simple asynchronous iteration over a generic collection.</summary>
      <typeparam name="T">The type of the elements in the collection.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.IAsyncEnumerator`1.MoveNextAsync">
      <summary>Advances the enumerator asynchronously to the next element of the collection.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1" /> that will complete with a result of <see langword="true" /> if the enumerator was successfully advanced to the next element, or <see langword="false" /> if the enumerator has passed the end of the collection.</returns>
    </member>
    <member name="P:System.Collections.Generic.IAsyncEnumerator`1.Current">
      <summary>Gets the element in the collection at the current position of the enumerator.</summary>
      <returns>The element in the collection at the current position of the enumerator.</returns>
    </member>
    <member name="T:System.Collections.Generic.ICollection`1">
      <summary>Defines methods to manipulate generic collections.</summary>
      <typeparam name="T">The type of the elements in the collection.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.Add(`0)">
      <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.Clear">
      <summary>Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.Contains(`0)">
      <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.Remove(`0)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
      <returns>
        <see langword="true" /> if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, <see langword="false" />. This method also returns <see langword="false" /> if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.ICollection`1.Count">
      <summary>Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.ICollection`1.IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Collections.Generic.IComparer`1">
      <summary>Defines a method that a type implements to compare two objects.</summary>
      <typeparam name="T">The type of objects to compare.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.IComparer`1.Compare(`0,`0)">
      <summary>Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.</summary>
      <param name="x">The first object to compare.</param>
      <param name="y">The second object to compare.</param>
      <returns>A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.  
  
 <list type="table"><listheader><term> Value</term><description> Meaning</description></listheader><item><term> Less than zero</term><description><paramref name="x" /> is less than <paramref name="y" />.</description></item><item><term> Zero</term><description><paramref name="x" /> equals <paramref name="y" />.</description></item><item><term> Greater than zero</term><description><paramref name="x" /> is greater than <paramref name="y" />.</description></item></list></returns>
    </member>
    <member name="T:System.Collections.Generic.IDictionary`2">
      <summary>Represents a generic collection of key/value pairs.</summary>
      <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
      <typeparam name="TValue">The type of values in the dictionary.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
      <summary>Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <param name="key">The object to use as the key of the element to add.</param>
      <param name="value">The object to use as the value of the element to add.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.</exception>
    </member>
    <member name="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)">
      <summary>Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key.</summary>
      <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the key; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.IDictionary`2.Remove(`0)">
      <summary>Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <param name="key">The key of the element to remove.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.</exception>
      <returns>
        <see langword="true" /> if the element is successfully removed; otherwise, <see langword="false" />.  This method also returns <see langword="false" /> if <paramref name="key" /> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)">
      <summary>Gets the value associated with the specified key.</summary>
      <param name="key">The key whose value to get.</param>
      <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.IDictionary`2.Item(`0)">
      <summary>Gets or sets the element with the specified key.</summary>
      <param name="key">The key of the element to get or set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and <paramref name="key" /> is not found.</exception>
      <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.</exception>
      <returns>The element with the specified key.</returns>
    </member>
    <member name="P:System.Collections.Generic.IDictionary`2.Keys">
      <summary>Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.IDictionary`2.Values">
      <summary>Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="T:System.Collections.Generic.IEnumerable`1">
      <summary>Exposes the enumerator, which supports a simple iteration over a collection of a specified type.</summary>
      <typeparam name="T">The type of objects to enumerate.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="T:System.Collections.Generic.IEnumerator`1">
      <summary>Supports a simple iteration over a generic collection.</summary>
      <typeparam name="T">The type of objects to enumerate.</typeparam>
    </member>
    <member name="P:System.Collections.Generic.IEnumerator`1.Current">
      <summary>Gets the element in the collection at the current position of the enumerator.</summary>
      <returns>The element in the collection at the current position of the enumerator.</returns>
    </member>
    <member name="T:System.Collections.Generic.IEqualityComparer`1">
      <summary>Defines methods to support the comparison of objects for equality.</summary>
      <typeparam name="T">The type of objects to compare.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)">
      <summary>Determines whether the specified objects are equal.</summary>
      <param name="x">The first object of type <paramref name="T" /> to compare.</param>
      <param name="y">The second object of type <paramref name="T" /> to compare.</param>
      <returns>
        <see langword="true" /> if the specified objects are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)">
      <summary>Returns a hash code for the specified object.</summary>
      <param name="obj">The <see cref="T:System.Object" /> for which a hash code is to be returned.</param>
      <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj" /> is a reference type and <paramref name="obj" /> is <see langword="null" />.</exception>
      <returns>A hash code for the specified object.</returns>
    </member>
    <member name="T:System.Collections.Generic.IList`1">
      <summary>Represents a collection of objects that can be individually accessed by index.</summary>
      <typeparam name="T">The type of elements in the list.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.IList`1.IndexOf(`0)">
      <summary>Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.</summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
      <returns>The index of <paramref name="item" /> if found in the list; otherwise, -1.</returns>
    </member>
    <member name="M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)">
      <summary>Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
    </member>
    <member name="M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)">
      <summary>Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.</summary>
      <param name="index">The zero-based index of the item to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
    </member>
    <member name="P:System.Collections.Generic.IList`1.Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <param name="index">The zero-based index of the element to get or set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
      <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="T:System.Collections.Generic.IReadOnlyCollection`1">
      <summary>Represents a strongly-typed, read-only collection of elements.</summary>
      <typeparam name="T">The type of the elements.</typeparam>
    </member>
    <member name="P:System.Collections.Generic.IReadOnlyCollection`1.Count">
      <summary>Gets the number of elements in the collection.</summary>
      <returns>The number of elements in the collection.</returns>
    </member>
    <member name="T:System.Collections.Generic.IReadOnlyDictionary`2">
      <summary>Represents a generic read-only collection of key/value pairs.</summary>
      <typeparam name="TKey">The type of keys in the read-only dictionary.</typeparam>
      <typeparam name="TValue">The type of values in the read-only dictionary.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.IReadOnlyDictionary`2.ContainsKey(`0)">
      <summary>Determines whether the read-only dictionary contains an element that has the specified key.</summary>
      <param name="key">The key to locate.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> if the read-only dictionary contains an element that has the specified key; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.IReadOnlyDictionary`2.TryGetValue(`0,`1@)">
      <summary>Gets the value that is associated with the specified key.</summary>
      <param name="key">The key to locate.</param>
      <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> if the object that implements the <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" /> interface contains an element that has the specified key; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.IReadOnlyDictionary`2.Item(`0)">
      <summary>Gets the element that has the specified key in the read-only dictionary.</summary>
      <param name="key">The key to locate.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and <paramref name="key" /> is not found.</exception>
      <returns>The element that has the specified key in the read-only dictionary.</returns>
    </member>
    <member name="P:System.Collections.Generic.IReadOnlyDictionary`2.Keys">
      <summary>Gets an enumerable collection that contains the keys in the read-only dictionary.</summary>
      <returns>An enumerable collection that contains the keys in the read-only dictionary.</returns>
    </member>
    <member name="P:System.Collections.Generic.IReadOnlyDictionary`2.Values">
      <summary>Gets an enumerable collection that contains the values in the read-only dictionary.</summary>
      <returns>An enumerable collection that contains the values in the read-only dictionary.</returns>
    </member>
    <member name="T:System.Collections.Generic.IReadOnlyList`1">
      <summary>Represents a read-only collection of elements that can be accessed by index.</summary>
      <typeparam name="T">The type of elements in the read-only list.</typeparam>
    </member>
    <member name="P:System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)">
      <summary>Gets the element at the specified index in the read-only list.</summary>
      <param name="index">The zero-based index of the element to get.</param>
      <returns>The element at the specified index in the read-only list.</returns>
    </member>
    <member name="T:System.Collections.Generic.ISet`1">
      <summary>Provides the base interface for the abstraction of sets.</summary>
      <typeparam name="T">The type of elements in the set.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.Add(`0)">
      <summary>Adds an element to the current set and returns a value to indicate if the element was successfully added.</summary>
      <param name="item">The element to add to the set.</param>
      <returns>
        <see langword="true" /> if the element is added to the set; <see langword="false" /> if the element is already in the set.</returns>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Removes all elements in the specified collection from the current set.</summary>
      <param name="other">The collection of items to remove from the set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifies the current set so that it contains only elements that are also in a specified collection.</summary>
      <param name="other">The collection to compare to the current set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether the current set is a proper (strict) subset of a specified collection.</summary>
      <param name="other">The collection to compare to the current set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> if the current set is a proper subset of <paramref name="other" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether the current set is a proper (strict) superset of a specified collection.</summary>
      <param name="other">The collection to compare to the current set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> if the current set is a proper superset of <paramref name="other" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether a set is a subset of a specified collection.</summary>
      <param name="other">The collection to compare to the current set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> if the current set is a subset of <paramref name="other" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether the current set is a superset of a specified collection.</summary>
      <param name="other">The collection to compare to the current set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> if the current set is a superset of <paramref name="other" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether the current set overlaps with the specified collection.</summary>
      <param name="other">The collection to compare to the current set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> if the current set and <paramref name="other" /> share at least one common element; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether the current set and the specified collection contain the same elements.</summary>
      <param name="other">The collection to compare to the current set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> if the current set is equal to <paramref name="other" />; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both.</summary>
      <param name="other">The collection to compare to the current set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifies the current set so that it contains all elements that are present in the current set, in the specified collection, or in both.</summary>
      <param name="other">The collection to compare to the current set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is <see langword="null" />.</exception>
    </member>
    <member name="T:System.Collections.Generic.KeyNotFoundException">
      <summary>The exception that is thrown when the key specified for accessing an element in a collection does not match any key in the collection.</summary>
    </member>
    <member name="M:System.Collections.Generic.KeyNotFoundException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.KeyNotFoundException" /> class using default property values.</summary>
    </member>
    <member name="M:System.Collections.Generic.KeyNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.KeyNotFoundException" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Collections.Generic.KeyNotFoundException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.KeyNotFoundException" /> class with the specified error message.</summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.Collections.Generic.KeyNotFoundException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.KeyNotFoundException" /> class with the specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.Collections.Generic.KeyValuePair" />
    <member name="T:System.Collections.Generic.KeyValuePair`2">
      <summary>Defines a key/value pair that can be set or retrieved.</summary>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.KeyValuePair`2.#ctor(`0,`1)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.KeyValuePair`2" /> structure with the specified key and value.</summary>
      <param name="key">The object defined in each key/value pair.</param>
      <param name="value">The definition associated with <paramref name="key" />.</param>
    </member>
    <member name="M:System.Collections.Generic.KeyValuePair`2.ToString">
      <summary>Returns a string representation of the <see cref="T:System.Collections.Generic.KeyValuePair`2" />, using the string representations of the key and value.</summary>
      <returns>A string representation of the <see cref="T:System.Collections.Generic.KeyValuePair`2" />, which includes the string representations of the key and value.</returns>
    </member>
    <member name="P:System.Collections.Generic.KeyValuePair`2.Key">
      <summary>Gets the key in the key/value pair.</summary>
      <returns>A <typeparamref name="TKey" /> that is the key of the <see cref="T:System.Collections.Generic.KeyValuePair`2" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.KeyValuePair`2.Value">
      <summary>Gets the value in the key/value pair.</summary>
      <returns>A <typeparamref name="TValue" /> that is the value of the <see cref="T:System.Collections.Generic.KeyValuePair`2" />.</returns>
    </member>
    <member name="T:System.Collections.ICollection">
      <summary>Defines size, enumerators, and synchronization methods for all nongeneric collections.</summary>
    </member>
    <member name="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.  
  
 -or-  
  
 The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.  
  
 -or-  
  
 The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Collections.ICollection.Count">
      <summary>Gets the number of elements contained in the <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>The number of elements contained in the <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="P:System.Collections.ICollection.IsSynchronized">
      <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).</summary>
      <returns>
        <see langword="true" /> if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.ICollection.SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="T:System.Collections.IComparer">
      <summary>Exposes a method that compares two objects.</summary>
    </member>
    <member name="M:System.Collections.IComparer.Compare(System.Object,System.Object)">
      <summary>Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.</summary>
      <param name="x">The first object to compare.</param>
      <param name="y">The second object to compare.</param>
      <exception cref="T:System.ArgumentException">Neither <paramref name="x" /> nor <paramref name="y" /> implements the <see cref="T:System.IComparable" /> interface.  
  
 -or-  
  
 <paramref name="x" /> and <paramref name="y" /> are of different types and neither one can handle comparisons with the other.</exception>
      <returns>A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />:   - If less than 0, <paramref name="x" /> is less than <paramref name="y" />.   - If 0, <paramref name="x" /> equals <paramref name="y" />.   - If greater than 0, <paramref name="x" /> is greater than <paramref name="y" />.</returns>
    </member>
    <member name="T:System.Collections.IDictionary">
      <summary>Represents a nongeneric collection of key/value pairs.</summary>
    </member>
    <member name="M:System.Collections.IDictionary.Add(System.Object,System.Object)">
      <summary>Adds an element with the provided key and value to the <see cref="T:System.Collections.IDictionary" /> object.</summary>
      <param name="key">The <see cref="T:System.Object" /> to use as the key of the element to add.</param>
      <param name="value">The <see cref="T:System.Object" /> to use as the value of the element to add.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.IDictionary" /> object.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary" /> is read-only.  
  
 -or-  
  
 The <see cref="T:System.Collections.IDictionary" /> has a fixed size.</exception>
    </member>
    <member name="M:System.Collections.IDictionary.Clear">
      <summary>Removes all elements from the <see cref="T:System.Collections.IDictionary" /> object.</summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary" /> object is read-only.</exception>
    </member>
    <member name="M:System.Collections.IDictionary.Contains(System.Object)">
      <summary>Determines whether the <see cref="T:System.Collections.IDictionary" /> object contains an element with the specified key.</summary>
      <param name="key">The key to locate in the <see cref="T:System.Collections.IDictionary" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.IDictionary" /> contains an element with the key; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.IDictionary.GetEnumerator">
      <summary>Returns an <see cref="T:System.Collections.IDictionaryEnumerator" /> object for the <see cref="T:System.Collections.IDictionary" /> object.</summary>
      <returns>An <see cref="T:System.Collections.IDictionaryEnumerator" /> object for the <see cref="T:System.Collections.IDictionary" /> object.</returns>
    </member>
    <member name="M:System.Collections.IDictionary.Remove(System.Object)">
      <summary>Removes the element with the specified key from the <see cref="T:System.Collections.IDictionary" /> object.</summary>
      <param name="key">The key of the element to remove.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary" /> object is read-only.  
  
 -or-  
  
 The <see cref="T:System.Collections.IDictionary" /> has a fixed size.</exception>
    </member>
    <member name="P:System.Collections.IDictionary.IsFixedSize">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IDictionary" /> object has a fixed size.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.IDictionary" /> object has a fixed size; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.IDictionary.IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IDictionary" /> object is read-only.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.IDictionary" /> object is read-only; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.IDictionary.Item(System.Object)">
      <summary>Gets or sets the element with the specified key.</summary>
      <param name="key">The key of the element to get or set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.IDictionary" /> object is read-only.  
  
 -or-  
  
 The property is set, <paramref name="key" /> does not exist in the collection, and the <see cref="T:System.Collections.IDictionary" /> has a fixed size.</exception>
      <returns>The element with the specified key, or <see langword="null" /> if the key does not exist.</returns>
    </member>
    <member name="P:System.Collections.IDictionary.Keys">
      <summary>Gets an <see cref="T:System.Collections.ICollection" /> object containing the keys of the <see cref="T:System.Collections.IDictionary" /> object.</summary>
      <returns>An <see cref="T:System.Collections.ICollection" /> object containing the keys of the <see cref="T:System.Collections.IDictionary" /> object.</returns>
    </member>
    <member name="P:System.Collections.IDictionary.Values">
      <summary>Gets an <see cref="T:System.Collections.ICollection" /> object containing the values in the <see cref="T:System.Collections.IDictionary" /> object.</summary>
      <returns>An <see cref="T:System.Collections.ICollection" /> object containing the values in the <see cref="T:System.Collections.IDictionary" /> object.</returns>
    </member>
    <member name="T:System.Collections.IDictionaryEnumerator">
      <summary>Enumerates the elements of a nongeneric dictionary.</summary>
    </member>
    <member name="P:System.Collections.IDictionaryEnumerator.Entry">
      <summary>Gets both the key and the value of the current dictionary entry.</summary>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Collections.IDictionaryEnumerator" /> is positioned before the first entry of the dictionary or after the last entry.</exception>
      <returns>A <see cref="T:System.Collections.DictionaryEntry" /> containing both the key and the value of the current dictionary entry.</returns>
    </member>
    <member name="P:System.Collections.IDictionaryEnumerator.Key">
      <summary>Gets the key of the current dictionary entry.</summary>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Collections.IDictionaryEnumerator" /> is positioned before the first entry of the dictionary or after the last entry.</exception>
      <returns>The key of the current element of the enumeration.</returns>
    </member>
    <member name="P:System.Collections.IDictionaryEnumerator.Value">
      <summary>Gets the value of the current dictionary entry.</summary>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Collections.IDictionaryEnumerator" /> is positioned before the first entry of the dictionary or after the last entry.</exception>
      <returns>The value of the current element of the enumeration.</returns>
    </member>
    <member name="T:System.Collections.IEnumerable">
      <summary>Exposes an enumerator, which supports a simple iteration over a non-generic collection.</summary>
    </member>
    <member name="M:System.Collections.IEnumerable.GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="T:System.Collections.IEnumerator">
      <summary>Supports a simple iteration over a non-generic collection.</summary>
    </member>
    <member name="M:System.Collections.IEnumerator.MoveNext">
      <summary>Advances the enumerator to the next element of the collection.</summary>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
      <returns>
        <see langword="true" /> if the enumerator was successfully advanced to the next element; <see langword="false" /> if the enumerator has passed the end of the collection.</returns>
    </member>
    <member name="M:System.Collections.IEnumerator.Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
    </member>
    <member name="P:System.Collections.IEnumerator.Current">
      <summary>Gets the element in the collection at the current position of the enumerator.</summary>
      <returns>The element in the collection at the current position of the enumerator.</returns>
    </member>
    <member name="T:System.Collections.IEqualityComparer">
      <summary>Defines methods to support the comparison of objects for equality.</summary>
    </member>
    <member name="M:System.Collections.IEqualityComparer.Equals(System.Object,System.Object)">
      <summary>Determines whether the specified objects are equal.</summary>
      <param name="x">The first object to compare.</param>
      <param name="y">The second object to compare.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="y" /> are of different types and neither one can handle comparisons with the other.</exception>
      <returns>
        <see langword="true" /> if the specified objects are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)">
      <summary>Returns a hash code for the specified object.</summary>
      <param name="obj">The <see cref="T:System.Object" /> for which a hash code is to be returned.</param>
      <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj" /> is a reference type and <paramref name="obj" /> is <see langword="null" />.</exception>
      <returns>A hash code for the specified object.</returns>
    </member>
    <member name="T:System.Collections.IList">
      <summary>Represents a non-generic collection of objects that can be individually accessed by index.</summary>
    </member>
    <member name="M:System.Collections.IList.Add(System.Object)">
      <summary>Adds an item to the <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">The object to add to the <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList" /> is read-only.  
  
 -or-  
  
 The <see cref="T:System.Collections.IList" /> has a fixed size.</exception>
      <returns>The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection.</returns>
    </member>
    <member name="M:System.Collections.IList.Clear">
      <summary>Removes all items from the <see cref="T:System.Collections.IList" />.</summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList" /> is read-only.</exception>
    </member>
    <member name="M:System.Collections.IList.Contains(System.Object)">
      <summary>Determines whether the <see cref="T:System.Collections.IList" /> contains a specific value.</summary>
      <param name="value">The object to locate in the <see cref="T:System.Collections.IList" />.</param>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Object" /> is found in the <see cref="T:System.Collections.IList" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.IList.IndexOf(System.Object)">
      <summary>Determines the index of a specific item in the <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">The object to locate in the <see cref="T:System.Collections.IList" />.</param>
      <returns>The index of <paramref name="value" /> if found in the list; otherwise, -1.</returns>
    </member>
    <member name="M:System.Collections.IList.Insert(System.Int32,System.Object)">
      <summary>Inserts an item to the <see cref="T:System.Collections.IList" /> at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="value" /> should be inserted.</param>
      <param name="value">The object to insert into the <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList" /> is read-only.  
  
 -or-  
  
 The <see cref="T:System.Collections.IList" /> has a fixed size.</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="value" /> is null reference in the <see cref="T:System.Collections.IList" />.</exception>
    </member>
    <member name="M:System.Collections.IList.Remove(System.Object)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">The object to remove from the <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList" /> is read-only.  
  
 -or-  
  
 The <see cref="T:System.Collections.IList" /> has a fixed size.</exception>
    </member>
    <member name="M:System.Collections.IList.RemoveAt(System.Int32)">
      <summary>Removes the <see cref="T:System.Collections.IList" /> item at the specified index.</summary>
      <param name="index">The zero-based index of the item to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList" /> is read-only.  
  
 -or-  
  
 The <see cref="T:System.Collections.IList" /> has a fixed size.</exception>
    </member>
    <member name="P:System.Collections.IList.IsFixedSize">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IList" /> has a fixed size.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.IList" /> has a fixed size; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.IList.IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IList" /> is read-only.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.IList" /> is read-only; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.IList.Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <param name="index">The zero-based index of the element to get or set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />.</exception>
      <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.IList" /> is read-only.</exception>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="T:System.Collections.IStructuralComparable">
      <summary>Supports the structural comparison of collection objects.</summary>
    </member>
    <member name="M:System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)">
      <summary>Determines whether the current collection object precedes, occurs in the same position as, or follows another object in the sort order.</summary>
      <param name="other">The object to compare with the current instance.</param>
      <param name="comparer">An object that compares members of the current collection object with the corresponding members of <paramref name="other" />.</param>
      <exception cref="T:System.ArgumentException">This instance and <paramref name="other" /> are not the same type.</exception>
      <returns>A signed integer that indicates the relationship of the current collection object to <paramref name="other" /> in the sort order: - If less than 0, the current instance precedes <paramref name="other" />. - If 0, the current instance and <paramref name="other" /> are equal. - If greater than 0, the current instance follows <paramref name="other" />.  
  
 <list type="table"><listheader><term> Return value</term><description> Description</description></listheader><item><term> -1</term><description> The current instance precedes <paramref name="other" />.</description></item><item><term> 0</term><description> The current instance and <paramref name="other" /> are equal.</description></item><item><term> 1</term><description> The current instance follows <paramref name="other" />.</description></item></list></returns>
    </member>
    <member name="T:System.Collections.IStructuralEquatable">
      <summary>Defines methods to support the comparison of objects for structural equality.</summary>
    </member>
    <member name="M:System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>Determines whether an object is structurally equal to the current instance.</summary>
      <param name="other">The object to compare with the current instance.</param>
      <param name="comparer">An object that determines whether the current instance and <paramref name="other" /> are equal.</param>
      <returns>
        <see langword="true" /> if the two objects are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)">
      <summary>Returns a hash code for the current instance.</summary>
      <param name="comparer">An object that computes the hash code of the current object.</param>
      <returns>The hash code for the current instance.</returns>
    </member>
  </members>
</doc>