<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.ServiceModel.Primitives</name>
  </assembly>
  <members>
    <member name="T:System.Collections.Generic.KeyedByTypeCollection`1">
      <summary>Provides a collection whose items are types that serve as keys.</summary>
      <typeparam name="TItem">The item types contained in the collection that also serve as the keys for the collection.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.KeyedByTypeCollection`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.KeyedByTypeCollection`1" /> class.</summary>
    </member>
    <member name="M:System.Collections.Generic.KeyedByTypeCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.KeyedByTypeCollection`1" /> class for a specified enumeration of objects.</summary>
      <param name="items">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> of generic type <see cref="T:System.Object" /> used to initialize the collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="items" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.KeyedByTypeCollection`1.Find``1">
      <summary>Returns the first item in the collection of a specified type.</summary>
      <typeparam name="T">The type of item in the collection to find.</typeparam>
      <returns>The object of type <paramref name="T" /> if it is a reference type and the value of type <paramref name="T" /> if it is a value type. The default value of the type is returned if no object of type <paramref name="T" /> is contained in the collection: <see langword="null" /> if it is a reference type and 0 if it is a value type.</returns>
    </member>
    <member name="M:System.Collections.Generic.KeyedByTypeCollection`1.FindAll``1">
      <summary>Returns a collection of objects of type <paramref name="T" /> that are contained in the <see cref="T:System.Collections.Generic.KeyedByTypeCollection`1" />.</summary>
      <typeparam name="T">The type of item in the collection to find.</typeparam>
      <returns>A <see cref="T:System.Collections.ObjectModel.Collection`1" /> of type <paramref name="T" /> that contains the objects of type <paramref name="T" /> from the original collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.KeyedByTypeCollection`1.GetKeyForItem(`0)">
      <summary>Gets the type of an item contained in the collection.</summary>
      <param name="item">The item in the collection whose type is to be retrieved.</param>
      <returns>The type of the specified <paramref name="item" /> in the collection.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.KeyedByTypeCollection`1.InsertItem(System.Int32,`0)">
      <summary>Inserts an element into the collection at a specific location.</summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The object to insert into the collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.KeyedByTypeCollection`1.Remove``1">
      <summary>Removes an object of a specified type from the collection.</summary>
      <typeparam name="T">The type of item in the collection to remove.</typeparam>
      <returns>The object removed from the collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.KeyedByTypeCollection`1.RemoveAll``1">
      <summary>Removes all of the elements of a specified type from the collection.</summary>
      <typeparam name="T">The type of item in the collection to remove.</typeparam>
      <returns>The <see cref="T:System.Collections.ObjectModel.Collection`1" /> that contains the objects of type <paramref name="T" /> from the original collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.KeyedByTypeCollection`1.SetItem(System.Int32,`0)">
      <summary>Replaces the item at the specified index with a new object.</summary>
      <param name="index">The zero-based index of the <paramref name="item" /> to be replaced.</param>
      <param name="item">The object to add to the collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is <see langword="null" />.</exception>
    </member>
    <member name="T:System.Collections.Generic.SynchronizedCollection`1">
      <summary>Provides a thread-safe collection that contains objects of a type specified by the generic parameter as elements.</summary>
      <typeparam name="T">The type of object contained as items in the thread-safe collection.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedCollection`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.SynchronizedCollection`1" /> class.</summary>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedCollection`1.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.SynchronizedCollection`1" /> class with the object used to synchronize access to the thread-safe collection.</summary>
      <param name="syncRoot">The object used to synchronize access the thread-safe collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="syncRoot" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedCollection`1.#ctor(System.Object,`0[])">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.SynchronizedCollection`1" /> class from a specified array of elements and with the object used to synchronize access to the thread-safe collection.</summary>
      <param name="syncRoot">The object used to synchronize access the thread-safe collection.</param>
      <param name="list">The <see cref="T:System.Array" /> of type <typeparamref name="T" /> elements used to initialize the thread-safe collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="syncRoot" /> or <paramref name="list" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedCollection`1.#ctor(System.Object,System.Collections.Generic.IEnumerable{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.SynchronizedCollection`1" /> class from a specified enumerable list of elements and with the object used to synchronize access to the thread-safe collection.</summary>
      <param name="syncRoot">The object used to synchronize access to the thread-safe collection.</param>
      <param name="list">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of elements used to initialize the thread-safe collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="syncRoot" /> or <paramref name="list" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedCollection`1.Add(`0)">
      <summary>Adds an item to the thread-safe, read-only collection.</summary>
      <param name="item">The element to be added to the collection.</param>
      <exception cref="T:System.ArgumentException">The value set is <see langword="null" /> or is not of the correct generic type <paramref name="T" /> for the collection.</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedCollection`1.Clear">
      <summary>Removes all items from the collection.</summary>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedCollection`1.ClearItems">
      <summary>Removes all items from the collection.</summary>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedCollection`1.Contains(`0)">
      <summary>Determines whether the collection contains an element with a specific value.</summary>
      <param name="item">The object to locate in the collection.</param>
      <returns>
        <see langword="true" /> if the element value is found in the collection; otherwise <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">The value set is <see langword="null" /> or is not of the correct generic type <paramref name="T" /> for the collection.</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedCollection`1.CopyTo(`0[],System.Int32)">
      <summary>Copies the elements of the collection to a specified array, starting at a particular index.</summary>
      <param name="array">The destination <see cref="T:System.Array" /> for the elements of type <typeparamref name="T" /> copied from the collection.</param>
      <param name="index">The zero-based index in the array at which copying begins.</param>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedCollection`1.GetEnumerator">
      <summary>Returns an enumerator that iterates through the synchronized collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> for objects of the type stored in the collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedCollection`1.IndexOf(`0)">
      <summary>Returns the index of the first occurrence of a value in the collection.</summary>
      <param name="item">Removes all items from the collection.</param>
      <returns>The zero-based index of the first occurrence of the value in the collection.</returns>
      <exception cref="T:System.ArgumentException">The value set is <see langword="null" /> or is not of the correct generic type <paramref name="T" /> for the collection.</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedCollection`1.Insert(System.Int32,`0)">
      <summary>Inserts an item into the collection at a specified index.</summary>
      <param name="index">The zero-based index of the element to be retrieved from the collection.</param>
      <param name="item">The object to be inserted into the collection as an element.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> specified is less than zero or greater than the number of items in the collection.</exception>
      <exception cref="T:System.ArgumentException">The value set is <see langword="null" /> or is not of the correct generic type <paramref name="T" /> for the collection.</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedCollection`1.InsertItem(System.Int32,`0)">
      <summary>Inserts an item into the collection at a specified index.</summary>
      <param name="index">The zero-based index of the collection where the object is to be inserted.</param>
      <param name="item">The object to be inserted into the collection.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> specified is less than zero or greater than the number of items in the collection.</exception>
      <exception cref="T:System.ArgumentException">The value set is <see langword="null" /> or is not of the correct generic type <paramref name="T" /> for the collection.</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedCollection`1.Remove(`0)">
      <summary>Removes the first occurrence of a specified item from the collection.</summary>
      <param name="item">The object to remove from the collection.</param>
      <returns>
        <see langword="true" /> if item was successfully removed from the collection; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedCollection`1.RemoveAt(System.Int32)">
      <summary>Removes an item at a specified index from the collection.</summary>
      <param name="index">The zero-based index of the element to be retrieved from the collection.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> specified is less than zero or greater than the number of items in the collection.</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedCollection`1.RemoveItem(System.Int32)">
      <summary>Removes an item at a specified <paramref name="index" /> from the collection.</summary>
      <param name="index">The zero-based index of the element to be retrieved from the collection.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> specified is less than zero or greater than the number of items in the collection.</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedCollection`1.SetItem(System.Int32,`0)">
      <summary>Replaces the item at a specified index with another item.</summary>
      <param name="index">The zero-based index of the object to be replaced.</param>
      <param name="item">The object to replace</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> specified is less than zero or greater than the number of items in the collection.</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the collection to a specified array, starting at a particular index.</summary>
      <param name="array">The destination <see cref="T:System.Array" /> for the elements of type <typeparamref name="T" /> copied from the collection.</param>
      <param name="index">The zero-based index in the array at which copying begins.</param>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the synchronized collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> for objects of the type stored in the collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#Add(System.Object)">
      <summary>Adds an element to the collection.</summary>
      <param name="value">The object to add to the collection.</param>
      <returns>The position into which the new element was inserted.</returns>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#Contains(System.Object)">
      <summary>Determines whether the collection contains an element with a specific value.</summary>
      <param name="value">The object to locate in the collection.</param>
      <returns>
        <see langword="true" /> if the element <paramref name="value" /> is found in the collection; otherwise <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not an object of the type contained in the collection.</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>Determines the zero-based index of an element in the collection.</summary>
      <param name="value">The element in the collection whose index is being determined.</param>
      <returns>The index of the <paramref name="value" /> if found in the collection; otherwise, -1.</returns>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Inserts an object into the collection at a specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="value" /> is to be inserted.</param>
      <param name="value">The object to insert into the collection.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> specified is less than zero or greater than the number of items in the collection.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="value" /> set is <see langword="null" /> or is not of the correct generic type <paramref name="T" /> for the collection.</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#Remove(System.Object)">
      <summary>Removes the first occurrence of a specified object as an element from the collection.</summary>
      <param name="value">The object to be removed from the collection.</param>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedCollection`1.Count">
      <summary>Gets the number of elements contained in the thread-safe collection.</summary>
      <returns>The number of elements contained in the thread-safe, read-only collection.</returns>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedCollection`1.Item(System.Int32)">
      <summary>Gets an element from the thread-safe collection with a specified index.</summary>
      <param name="index">The zero-based index of the element to be retrieved from the collection.</param>
      <returns>The object in the collection that has the specified <paramref name="index" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> specified is less than zero or greater than the number of items in the collection.</exception>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedCollection`1.Items">
      <summary>Gets the list of elements contained in the thread-safe collection.</summary>
      <returns>The <see cref="T:System.Collections.Generic.IList`1" /> of elements that are contained in the thread-safe, read-only collection.</returns>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedCollection`1.SyncRoot">
      <summary>Gets the object used to synchronize access to the thread-safe collection.</summary>
      <returns>An object used to synchronize access to the thread-safe collection.</returns>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Gets a value that indicates whether the collection is read only.</summary>
      <returns>
        <see langword="false" />
      </returns>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedCollection`1.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value that indicates whether the collection is thread safe.</summary>
      <returns>
        <see langword="true" />
      </returns>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedCollection`1.System#Collections#ICollection#SyncRoot">
      <summary>Gets the object used to synchronize access to the thread-safe collection.</summary>
      <returns>An object used to synchronize access to the thread-safe collection.</returns>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#IsFixedSize">
      <summary>Gets a value that indicates whether the collection is fixed in size.</summary>
      <returns>
        <see langword="false" />
      </returns>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#IsReadOnly">
      <summary>Gets a value that indicates whether the collection is read only.</summary>
      <returns>
        <see langword="false" />
      </returns>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#Item(System.Int32)">
      <summary>Gets or sets the item at a specified zero-based index.</summary>
      <param name="index">The zero-based index of the element to be retrieved from the collection.</param>
      <returns>The item with the specified <paramref name="index" />.</returns>
      <exception cref="T:System.ArgumentException">The value set is <see langword="null" /> or is not of the correct generic type <paramref name="T" /> for the collection.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> specified is less than zero or greater than the number of items in the collection.</exception>
    </member>
  </members>
</doc>